/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.scut24lab.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.Name;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jdom.JDOMException;

import com.scut24lab.struts.form.PreComputeForm;

import java.io.IOException;
import java.util.Iterator;
import javax.xml.soap.*;

import data.web.olapschema.*;

/**
 * MyEclipse Struts Creation date: 03-30-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/preCompute" name="preComputeForm" scope="request"
 *                validate="true"
 */
public class PreComputeAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		PreComputeForm preComputeForm = (PreComputeForm) form;

		HttpSession session = request.getSession(true);
		
		//local-config.xml文件中schemaName和cubeName对应的节点
		try {
			System.out.println(preComputeForm.getSchemaName()+preComputeForm.getCubeName()+preComputeForm.getAlg()+preComputeForm.getQryAlg());
			Util.addLocalConfigNode(preComputeForm.getSchemaName(), preComputeForm.getCubeName(), preComputeForm.getAlg(), preComputeForm.getQryAlg());
		} catch (FileNotFoundException e1) {
			
			e1.printStackTrace();
			session.setAttribute("message", "在记录预计算信息时找不到local-config.xml文件");
			return mapping.findForward("PreComFailure");
		} catch (JDOMException e1) {
			
			e1.printStackTrace();
			session.setAttribute("message", "在记录预计算信息时不能解析local-config.xml文件");
			return mapping.findForward("PreComFailure");
		} catch (IOException e1) {
			
			e1.printStackTrace();
			session.setAttribute("message", "在记录预计算信息时读取local-config.xml文件发生IO错误");
			return mapping.findForward("PreComFailure");
		} catch(Exception e1){
			e1.printStackTrace();
			session.setAttribute("message", "在记录预计算信息时发生未知异常");
			return mapping.findForward("PreComFailure");
		}

		//进行预计算
		String preComputeResult = null;
		synchronized (this.getClass()) {
			try {
				
				preComputeResult = PreComputation(preComputeForm
						.getSchemaName(), preComputeForm.getCubeName(),
						"toAdd", "toAdd");
			} catch (SOAPException e) {
				e.printStackTrace();
				//预计算失败需要删除local-config.xml中对应的节点记录
				String delResult=delLocalConfigNode(preComputeForm
						.getSchemaName(), preComputeForm.getCubeName());
				session.setAttribute("message", "SOAP出错，请检查数据仓库引擎"+delResult);
				return mapping.findForward("PreComFailure");
			} catch (IOException e) {
				e.printStackTrace();
				String delResult=delLocalConfigNode(preComputeForm
						.getSchemaName(), preComputeForm.getCubeName());
				session.setAttribute("message", "IO异常"+delResult);
				return mapping.findForward("PreComFailure");
			} catch (Exception e) {
				e.printStackTrace();
				String delResult=delLocalConfigNode(preComputeForm
						.getSchemaName(), preComputeForm.getCubeName());
				session.setAttribute("message", "未知异常"+delResult);
				return mapping.findForward("PreComFailure");
			}
		}
		// 预计算失败，删除local-config.xml中对应的节点记录
		if (preComputeResult == null
				|| preComputeResult.toLowerCase().indexOf("success") == -1) {
			preComputeResult+=delLocalConfigNode(preComputeForm
					.getSchemaName(), preComputeForm.getCubeName());
		}
		session.setAttribute("message", preComputeResult);
		return mapping.findForward("PreComSuccess");
		
	}

	/**
	 * 对schemaname下的cubename进行预计算
	 * @param schemaname
	 * @param cubename
	 * @param olaptype
	 * @param algorithm
	 * @return
	 * @throws SOAPException
	 * @throws IOException
	 */
	public String PreComputation(String schemaname, String cubename,
			String olaptype, String algorithm) throws SOAPException,
			IOException {
		String result = null;
		SOAPConnection connection = null;
		try {
			// First create the connection
			SOAPConnectionFactory soapConnFactory = SOAPConnectionFactory
					.newInstance();
			connection = soapConnFactory.createConnection();

			// Next, create the actual message
			MessageFactory messageFactory = MessageFactory.newInstance();
			SOAPMessage message = messageFactory.createMessage();

			// Create objects for the message parts
			SOAPPart soapPart = message.getSOAPPart();
			SOAPEnvelope envelope = soapPart.getEnvelope();
			SOAPBody body = envelope.getBody();

			// Populate the body
			// Create the main element and namespace
			SOAPElement bodyElement = body.addChildElement(envelope.createName(
					"preCompute", "x1", "scut.south.c4.230.lcx"));
			// Add content

			Name schema = envelope.createName("schemaname", "x2",
					"scut.south.c4.230.lcl");
			SOAPElement eRequestType1 = bodyElement.addChildElement(schema);
			eRequestType1.addTextNode(schemaname);

			Name nPara = envelope.createName("cubename", "x3",
					"scut.south.c4.230.czp");
			SOAPElement eRequestType2 = bodyElement.addChildElement(nPara);
			eRequestType2.addTextNode(cubename);
			// bodyElement.addTextNode("37");

			Name olap = envelope.createName("olaptype", "x4",
					"scut.south.c4.230.wf");
			SOAPElement eRequestType3 = bodyElement.addChildElement(olap);
			eRequestType3.addTextNode(olaptype);

			Name alg = envelope.createName("algorithm", "x5",
					"scut.south.c4.230.wz");
			SOAPElement eRequestType4 = bodyElement.addChildElement(alg);
			eRequestType4.addTextNode(algorithm);

			// Save the message
			message.saveChanges();

			// Check the input
			message.writeTo(System.out);

			// Send the message and get a reply

			// Set the destination
			String destination = "http://localhost:4096";
			// Send the message

			SOAPMessage reply = connection.call(message, destination);

			SOAPBody soapbody = reply.getSOAPPart().getEnvelope().getBody();

			Name name = reply.getSOAPPart().getEnvelope().createName(
					"preComputeResponse", "", "http://localhost/preCompute/");
			SOAPElement eResponse = selectSingleNode(soapbody, name);
			// System.out.println(eResponse);

			Name nReturn = envelope.createName("return", "",
					"http://localhost/preCompute/");
			SOAPElement eReturn = selectSingleNode(eResponse, nReturn);
			// System.out.println(eReturn);

			Name nRoot = envelope.createName("root", "",
					"http://localhost/preCompute/");
			SOAPElement eRoot = selectSingleNode(eReturn, nRoot);
			// System.out.println(eRoot);

			Name nPreCmptRetFlag = envelope.createName("PreCmptRetFlag", "",
					"http://localhost/preCompute/");
			SOAPElement ePreCmptRetFlag = selectSingleNode(eRoot,
					nPreCmptRetFlag);
			// System.out.println(ePreCmptRetFlag);

			result = ePreCmptRetFlag.getValue();

		} catch (SOAPException e) {
			throw e;
		} catch (IOException e) {
			throw e;
		} finally {
			// Close the connection
			if (connection != null)
				connection.close();
		}
		return result;
	}

	private SOAPElement selectSingleNode(SOAPElement contextNode, Name childName) {

		Iterator it = contextNode.getChildElements(childName);
		if (it.hasNext())
			return (SOAPElement) it.next();
		else
			return null;
	}
	
	/**
	 * 删除local-config.xml中对应的节点记录，返回操作结果
	 * @param schemaName
	 * @param cubeName
	 * @return
	 */
	private String delLocalConfigNode(String schemaName,String cubeName){
		try {
			boolean rs=Util.delLocalConfigNode(schemaName,cubeName);
			if(rs)
				return "\n 成功删除local-config.xml中对应的节点记录";
			else
				return "\n local-config.xml中对应的节点不存在";
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return "\n 在删除local-config.xml中对应的节点记录时不能找到local-config.xml文件";
		} catch (JDOMException e) {
			e.printStackTrace();
			return "\n 在删除local-config.xml中对应的节点记录时不能解析local-config.xml文件";
		} catch (IOException e) {
			e.printStackTrace();
			return "\n 在删除local-config.xml中对应的节点记录时发生IO异常";	
		}
	}
	
}