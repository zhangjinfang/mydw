/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.scut24lab.struts.action;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jdom.JDOMException;

import com.scut24lab.struts.form.SaveDSForm;

import data.web.olapschema.Schema;
import data.web.olapschema.Util;

/**
 * MyEclipse Struts Creation date: 03-30-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/saveDS" name="saveDSForm" input="editDS.jsp"
 *                scope="request" validate="true"
 */
public class SaveDSAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SaveDSForm saveDSForm = (SaveDSForm) form;

		HttpSession session = request.getSession(true);

		String selSchName = saveDSForm.getSelSchName();
		// 参考data.web.olapschema中的Util.java,下面调用这个类中的一个函数,返回selSchName对应的路径.
		String selSchPath="";
		try {
			selSchPath = Util.getWebRootPath() + '/'
					+ Util.getSchemaFilePath(selSchName);
		} catch (JDOMException e1) {
			
			e1.printStackTrace();
			session.setAttribute("message", "不能解析SchemaConfig.xml");
			return mapping.findForward("SaveFailure");
		} catch (IOException e1) {
			
			e1.printStackTrace();
			session.setAttribute("message", "不能解析SchemaConfig.xml");
			return mapping.findForward("SaveFailure");
		}

		// 根据路径生成File文件,进而定义schema类型的数据.
		File schemaFile = new File(selSchPath);
		Schema myschema = null;
		// to lxw：此处需要对异常进行处理，跳转到错误页面
		try {
			myschema = new Schema(schemaFile);
		} catch (JDOMException e) {
			e.printStackTrace();
			session.setAttribute("message", "不能解析元数据文件" + selSchPath);
			return mapping.findForward("SaveFailure");
		} catch (IOException e) {
			e.printStackTrace();
			session.setAttribute("message", "不能读取元数据文件" + selSchPath);
			return mapping.findForward("SaveFailure");
		} catch (Exception e) {
			e.printStackTrace();
			session
					.setAttribute("message", "在读取元数据文件" + selSchPath
							+ "时发生未知异常");
			return mapping.findForward("SaveFailure");
		}

		// 将用户编辑的数据源的新的信息写入XML文件中.
		myschema.setDataSourceUrl(saveDSForm.getUrl());
		// System.out.println("Modified: "+modifiedUrl);
		myschema.setConnDriver(saveDSForm.getConnDriver());
		myschema.setConnString(saveDSForm.getConnString());
		myschema.setUserName(saveDSForm.getUserName());
		myschema.setPassWord(saveDSForm.getPassWord());
		// to lxw：此处需要对异常进行处理，跳转到错误页面
		synchronized (this.getClass()) {
			try {
				myschema.outToFile(selSchPath);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				session.setAttribute("message", "在更改元数据文件时找不到元数据文件"
						+ selSchPath);
				return mapping.findForward("SaveFailure");
			} catch (IOException e) {
				e.printStackTrace();
				session.setAttribute("message", "不能写入元数据文件" + selSchPath);
				return mapping.findForward("SaveFailure");
			} catch (Exception e) {
				e.printStackTrace();
				session.setAttribute("message", "在写入元数据文件" + selSchPath
						+ "时发生未知异常");
				return mapping.findForward("SaveFailure");
			}
		}
		session.setAttribute("message", "成功修改数据源");

		return mapping.findForward("SaveSuccess");
	}
}