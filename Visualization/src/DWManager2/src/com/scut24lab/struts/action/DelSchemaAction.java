/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.scut24lab.struts.action;

import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jdom.JDOMException;

import com.scut24lab.struts.form.DelSchemaForm;
import data.web.olapschema.Util;
/** 
 * MyEclipse Struts
 * Creation date: 04-04-2008
 * 
 * XDoclet definition:
 * @struts.action path="/delSchema" name="delSchemaForm" input="/delSchema.jsp" scope="request" validate="true"
 * @struts.action-forward name="delSchemaSuccess" path="/delSchemaSuccess.jsp"
 * @struts.action-forward name="delSchemaFailure" path="/error.jsp"
 */
public class DelSchemaAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		DelSchemaForm delSchemaForm = (DelSchemaForm) form;
		String schemaName=delSchemaForm.getSchemaName();
		String message="";
		HttpSession session = request.getSession(true);
		
		//找到schema文件路径
		String xfpath=Util.getWebRootPath()+"/";
		try {
			xfpath += Util.getSchemaFilePath(schemaName);
		} catch (JDOMException e1) {
			e1.printStackTrace();
			message+="不能解析SchemaConfig.xml文件\n";
			session.setAttribute("message", message);
			return mapping.findForward("delSchemaFailure");
		} catch (IOException e1) {
			e1.printStackTrace();
			message+="读取SchemaConfig.xml文件发生IO错误\n";
			session.setAttribute("message", message);
			return mapping.findForward("delSchemaFailure");
		}
		
		//删除SchemaConfig.xml中的路径条目
		try {
			Util.delSchemaFilePath(delSchemaForm.getSchemaName());
		} catch (JDOMException e) {
			e.printStackTrace();
			message+="不能解析SchemaConfig.xml文件\n";
			session.setAttribute("message", message);
			return mapping.findForward("delSchemaFailure");
		} catch (IOException e) {
			e.printStackTrace();
			message+="读写SchemaConfig.xml文件时发生IO错误\n";
			session.setAttribute("message", message);
			return mapping.findForward("delSchemaFailure");
		} catch(Exception e){
			e.printStackTrace();
			message+="读写SchemaConfig.xml文件时发生未知错误\n";
			session.setAttribute("message", message);
			return mapping.findForward("delSchemaFailure");
		}
		
		message+="成功删除SchemaConfig.xml中的路径条目\n";
		//删除该shema文件
		File schemaFile=new File(xfpath);
		schemaFile.delete();
		message+="成功删除"+xfpath+"文件\n";
		
		//删除local-config.xml下的相关记录
		try {
			Util.delLocalConfigNode(schemaName);
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
			message+="不能找到local-config.xml文件\n";
			session.setAttribute("message", message);
			return mapping.findForward("delSchemaFailure");
		} catch (JDOMException e) {
			
			e.printStackTrace();
			message+="不能解析local-config.xml文件\n";
			session.setAttribute("message", message);
			return mapping.findForward("delSchemaFailure");
		} catch (IOException e) {
			
			e.printStackTrace();
			message+="读写local-config.xml文件时发生IO错误\n";
			session.setAttribute("message", message);
			return mapping.findForward("delSchemaFailure");
		}
		message+="成功删除local-config.xml下的相关记录\n";
		
		session.setAttribute("message", message);
		
		return mapping.findForward("delSchemaSuccess");
	}
}